model {

  # Mean and precision estimates of the linear regressions for the drift rate
  b.mu ~ dunif(0.00001,50) # d
  b.pr ~ dgamma(1, 0.1)

  # Mean and precision estimates of the noise
  alpha.mu ~ dunif(0.000001, 2)    # noise
  alpha.pr ~ dgamma(1, 0.1)
  
  # Error terms for nDT
  # ndt.mu ~ dunif(0, 1)  # non decision times; reduced the upper limit for the NDT compared to aDDM based on RT distribution
  # ndt.pr ~ dgamma(1, 0.1)

  # error term for the regression function (trial by trial drift rate)
  e.sG <- pow(e.m,2) / pow(e.d,2)
  e.rG <- e.m / pow(e.d,2)
  e.m ~ dgamma(1,0.2)T(0.001,20)
  e.d ~ dgamma(1,0.5)T(0.001,20)

  # Bias of the DDM
  bias.alpha <- bias.mu * bias.kappa
  bias.beta <- (1 - bias.mu) * bias.kappa
  bias.mu ~ dbeta(2, 2)T(0.01,0.99)
  bias.kappa ~ dgamma(1, 0.5)

  # Barrier decay
  # decay.alpha ~ dbeta(1, 3)T(0, 0.5)
  # decay.beta ~ dgamma(2, .5)

  for (p in 1:ns) { # subject level

    b.p[p] ~ dnorm(b.mu, b.pr)T(0.000001,50)

    alpha.p[p] ~ dnorm(alpha.mu, alpha.pr)T(0.00001,2)
    # theta.p[p] ~ dnorm(ndt.mu, ndt.pr)T(0.01, 1) #reduced the upper limit for the NDT compared to aDDM based on RT distribution

    e.p.tau[p] ~ dgamma(e.sG, e.rG)T(0.001,20)

    bias.p[p] ~ dbeta(bias.alpha, bias.beta)T(0.01,0.99)

    #decay.p[p] ~ dbeta(decay.alpha, decay.beta)T(0, 0.5)
    decay.p[p] ~ dunif(0, .2)
  }

  for (i in 1:N) { # trial level

    # Compute barrier for trial given the subject's decay parameter
    barrier[i] <- 2 / (1 + (decay.p[idxP[i]] * timestep[i]))

    ## WIENER model
    # y[i] ~ dwieners(barrier[i], tau[i], bet[i], w[i], alpha.p[idxP[i]] )
    y[i] ~ dwieners(barrier[i], .3, bet[i], w[i], alpha.p[idxP[i]] ) # fixing ndt to .3

    # generate predictions
    # y_pred[i] ~ dwieners(barrier[i], tau[i], bet[i], w[i], alpha.p[idxP[i]] )
    y_pred[i] ~ dwieners(barrier[i], .3, bet[i], w[i], alpha.p[idxP[i]] )

    # generate trial-by-trial nDT
    # tau[i] <- theta.p[idxP[i]]

    # generate trial-by-trial Bias
    bet[i] <- bias.p[idxP[i]]

    # The actual drift rate
    w[i] ~ dnorm(li.hat[i], e.p.tau[idxP[i]])

    # Drift rate function, depends on the fixations and rt
    li.hat[i] <- b.p[idxP[i]] * (v_diff[i])

  }
}
